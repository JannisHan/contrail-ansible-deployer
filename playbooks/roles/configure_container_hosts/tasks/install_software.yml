---
- name: install epel
  yum:
    name: epel-release
    state: latest

- name: install ntpd
  yum:
    name: ntp
    state: latest

- name: set ntp server
  template:
    src: ntp.conf.j2
    dest: /etc/ntp.conf

- name: initial time sync
  shell: "ntpdate {{ CONTAINER_VM_CONFIG.network.ntpserver }}"
  ignore_errors: yes

- name: start ntp service
  service: name=ntpd state=started enabled=yes

- name: install pip
  yum:
    name: python-pip
    state: latest

- name: create docker repo
  yum_repository:
    name: dockerrepo
    description: Docker Repository
    baseurl: https://yum.dockerproject.org/repo/main/centos/7
    gpgkey: https://yum.dockerproject.org/gpg
    gpgcheck: yes

- name: install docker
  yum:
    name: docker-engine-1.13.0
    state: latest

#- name: set docker registry
#  copy:
#    content: "{\n  \"insecure-registries\": [\"{{ CONTAINER_REGISTRY }}\"]\n}"
#    dest: /etc/docker/daemon.json
#    content: "[Service]\nMountFlags=shared\nExecStart=/usr/bin/docker daemon --insecure-registry {{ CONTAINER_REGISTRY }}\n"
#    dest: /etc/systemd/system/docker.service.d/contrail.conf
#  when: CONTAINER_REGISTRY is defined

- name: register /etc/docker/daemon.json
  stat:
    path: /etc/docker/daemon.json
  register: p

- name: create /etc/docker directory
  file:
    path: /etc/docker
    state: directory
    mode: 0755

- name: create emtpy /etc/docker/daemon.json is it doesn't exis
  copy:
    content: ""
    dest: /etc/docker/daemon.json
  when: not p.stat.exists

- name: set registry string if it is the first one
  set_fact:
    new_reg: "{% raw %}{{% endraw %}\n \"insecure-registries\": [\"{{CONTAINER_REGISTRY}}\"]\n{% raw %}}{% endraw %}\n"
  when: not p.stat.exists

- name: add 1st registry entry to file
  lineinfile:
    dest: /etc/docker/daemon.json
    line: "{{ new_reg |to_json}}"
  when: not p.stat.exists

- name: read /etc/docker/daemon.json if it exists
  shell: cat /etc/docker/daemon.json
  register: docker_daemon_file

- name: set entries to json
  set_fact:
    docker_daemon: "{{ docker_daemon_file.stdout | from_json }}"

- name: check if registry is already in
  set_fact:
    is_registry_in: True
  when: CONTAINER_REGISTRY in item.value and p.stat.exists
  with_dict: "{{ docker_daemon }}"

- name: add registry to list
  set_fact:
    new_docker_registries: "{{ item.value }} + [ '{{ CONTAINER_REGISTRY }}' ]"
  when: item.key == "insecure-registries" and is_registry_in is undefined
  with_dict: "{{ docker_daemon }}"

- name: create new registry string
  set_fact:
    reg_string: "{% raw %}{{% endraw %}\n \"insecure-registries\": [{% for arg1 in new_docker_registries %}\"{{arg1}}\"{% if not loop.last %},{% endif %}{% endfor %}]\n{% raw %}}{% endraw %}"
  when: is_registry_in is undefined

- name: empty existing file *danger danger*
  copy:
    content: ""
    dest: /etc/docker/daemon.json
  when: p.stat.exists and is_registry_in is undefined

- name: write to /etc/docker/daemon.json
  lineinfile:
    dest: /etc/docker/daemon.json
    line: "{{ reg_string |to_json}}"
  when: p.stat.exists and is_registry_in is undefined

- name: reload systemd
  shell: systemctl daemon-reload

- name: start docker daemon
  service:
    enabled: yes
    name: docker
    state: restarted

- name: get docker compose
  get_url:
    url: https://github.com/docker/compose/releases/download/1.17.0/docker-compose-Linux-x86_64
    dest: /usr/local/bin/docker-compose
    mode: 0777

- name: install python compose
  pip:
    name: docker-compose==1.9.0

#- name: "Build hosts file"
#  lineinfile: dest=/etc/hosts regexp='.*{{ item }}$' line="{{ item }} {{ item.replace('.','-') }}.{{ hostvars[groups['hypervisors'][0]].CONTAINER_VM_CONFIG.network.domainsuffix }} {{ item.replace('.','-') }}" state=present
#  with_items: "{{ hostvars[inventory_hostname].groups.container_hosts }}"

- name: create log file directory
  file:
   dest: /var/log/docker/contrail
   state: directory
   mode: 0777

- name: create k8s repo
  yum_repository:
    name: Kubernetes
    description: k8s repo
    baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
    gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
    repo_gpgcheck: yes
    gpgcheck: yes
  when: roles[inventory_hostname].k8s_master is defined or roles[inventory_hostname].k8s_minion is defined

- name: install kubelet-1.7.4-0
  yum:
    name: kubelet-1.7.4-0
    state: latest
  when: roles[inventory_hostname].k8s_master is defined or roles[inventory_hostname].k8s_minion is defined

- name: install kubeadm-1.7.4-0
  yum:
    name: kubeadm-1.7.4-0
    state: latest
  when: roles[inventory_hostname].k8s_master is defined or roles[inventory_hostname].k8s_minion is defined

- name: install kubectl-1.7.4-0
  yum:
    name: kubectl-1.7.4-0
    state: latest
  when: roles[inventory_hostname].k8s_master is defined or roles[inventory_hostname].k8s_minion is defined

- name: set selinux to permissive
  selinux:
    policy: targeted
    state: permissive

- name: sysctl -w net.bridge.bridge-nf-call-iptables=1
  shell: sysctl -w net.bridge.bridge-nf-call-iptables=1 && echo "net.bridge.bridge-nf-call-iptables=1" >> /etc/sysctl.conf
  when: roles[inventory_hostname].k8s_master is defined or roles[inventory_hostname].k8s_minion is defined

- name: sysctl -w net.bridge.bridge-nf-call-ip6tables=1
  shell: sysctl -w net.bridge.bridge-nf-call-ip6tables=1 && echo "net.bridge.bridge-nf-call-ip6tables=1" >> /etc/sysctl.conf
  when: roles[inventory_hostname].k8s_master is defined or roles[inventory_hostname].k8s_minion is defined

- name: flush iptables
  shell: iptables -F
